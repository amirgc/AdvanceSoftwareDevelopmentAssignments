Lab3.1
public interface IQueue {
	void enqueue(String dat);
	String dequeue();
}

public interface IStack {
	void push(String o);

	String pop();

	boolean isEmpty();

	boolean isFull();
}

public class Adaptee {
	private String[] data;
	private int start;
	private int end;

	public String startString() {
		return data[start];
	}

	public String endString() {
		return data[end];
	}

	public boolean empty() {
		return (end == -1);
	}

	public void add(String str) {
		data[end] = str;
		end++;
	}

	public void remove(int pos) {
		for (int i = pos; i < end; i++) {
			data[i] = data[i + 1];
		}
	}

	public String get(int pos) {
		return data[pos];
	}

	public int getEnd() {		
		return data.length-1;
	}

	public boolean isFull() {
		// TODO Auto-generated method stub
		return false;
	}

}

public class TwoWaysAdapter implements IStack, IQueue {

	private Adaptee adaptee;

	@Override
	public void push(String str) {
		adaptee.add(str);
	}

	@Override
	public String pop() {
		int end = adaptee.getEnd();
		String str = adaptee.get(end);
		adaptee.remove(end);
		return str;
	}

	@Override
	public boolean isEmpty() {
		return adaptee.empty();
	}

	@Override
	public void enqueue(String str) {
		adaptee.add(str);
	}

	@Override
	public String dequeue() {
		String str = adaptee.get(0);
		adaptee.remove(0);
		return str;
	}

	@Override
	public boolean isFull() {
		return adaptee.isFull();
	}

}

